--------------------------------------------------------------------------------------------------------------------------------------------------------
1. Sound sensor:
--------------------------------------------------------------------------------------------------------------------------------------------------------

#define SOUND_SENSOR_PIN A0
int soundThreshold = 100;
void setup () {
pinMode (SOUND_SENSOR_PIN, INPUT);
Serial.begin(115200);
}
void loop () {
int soundValue = analogRead(SOUND_SENSOR_PIN);
if (soundValue > soundThreshold) {
Serial.print("Sound Detected: ");
Serial.println(soundValue);
delay(1000); 
}
}

--------------------------------------------------------------------------------------------------------------------------------------------------------
2. ultrasonic sensor:
--------------------------------------------------------------------------------------------------------------------------------------------------------
const int trigPin = 2; 
const int echoPin = 3; 

void setup() {
Serial.begin(9600);
pinMode(trigPin, OUTPUT);
pinMode(echoPin, INPUT);
}
void loop() {
digitalWrite(trigPin, LOW);
delayMicroseconds(2);
digitalWrite(trigPin, HIGH);
delayMicroseconds(10);
digitalWrite(trigPin, LOW);
long duration = pulseIn(echoPin, HIGH);
float distance = (duration / 2.0) * 0.0343; 
if (distance >= 2 && distance <= 10) {
Serial.print("Distance: ");
Serial.print(distance);
Serial.println(" cm");
}
else {
   Serial.println("Out of range");
}
delay(1000); 
}
--------------------------------------------------------------------------------------------------------------------------------------------------------
3. Touch sensor:
--------------------------------------------------------------------------------------------------------------------------------------------------------


#define BUTTON_PIN 4
bool wasPressed = false;
void setup() {
  pinMode(BUTTON_PIN, INPUT);
  Serial.begin(115200);
}
void loop() {
bool isPressed = isTouchPressed(BUTTON_PIN);
if (isPressed && !wasPressed) {
 Serial.println("Touch pressed");
 }
 wasPressed = isPressed;
 delay(100); 
}
bool isTouchPressed(int pin) {
return digitalRead(pin) == HIGH; }

--------------------------------------------------------------------------------------------------------------------------------------------------------
4. Buzzer:
--------------------------------------------------------------------------------------------------------------------------------------------------------
const int buzzerPin = 9; 
void setup() {
pinMode(buzzerPin, OUTPUT); 
}
void loop() {
playAscendingTones();
delay(1000); 
}
void playAscendingTones() {
int frequencies[ ] = {262, 294, 330, 349, 392, 440, 494, 523}; 

for (int i = 0; i < 8; i++) {
 tone(buzzerPin, frequencies[i]); 
delay(500); 
noTone(buzzerPin); 
delay(100); 
}
}

--------------------------------------------------------------------------------------------------------------------------------------------------------
5. Servo:
--------------------------------------------------------------------------------------------------------------------------------------------------------
#include <Servo.h>
Servo servo;  
int servoPin = 9;
 int pos = 90;
void setup() {
  servo.attach(servoPin); 
  servo.write(pos);  
  delay(1000);
}
void loop() {
for (pos = 90; pos >= 0; pos--) {
    servo.write(pos);
    delay(15); 
}
delay(1000); 
for (pos = 0; pos <= 180; pos++) {
    servo.write(pos);
    delay(15); }
    delay(1000); 
}

--------------------------------------------------------------------------------------------------------------------------------------------------------
6. LED Matrix:
--------------------------------------------------------------------------------------------------------------------------------------------------------
//DISPLAY ALL LIGHT IN LED:
#include <LedControl.h>
// Define the number of MAX7219 devices you have in the daisy chain
#define NUM_DEVICES 1

// Define the pins connected to the MAX7219
#define DATA_PIN 12
#define CLOCK_PIN 11
#define LOAD_PIN 10

// Create a LedControl object
LedControl lc=LedControl(DATA_PIN, CLOCK_PIN, LOAD_PIN, NUM_DEVICES);

void setup() {
  // Initialize the MAX7219
  lc.shutdown(0, false);  // Wake up the display
  lc.setIntensity(0, 8); // Set the brightness (0-15)
  lc.clearDisplay(0);    // Clear the display
}

void loop() {
  // Loop through all rows and columns to light up all LEDs
  for (int row = 0; row < 8; row++) {
    for (int col = 0; col < 8; col++) {
      lc.setLed(0, row, col, true);
      delay(100);  // Adjust the delay for your desired speed
    }
  }

  // Clear the display after lighting up all LEDs
  lc.clearDisplay(0);
  delay(500);  // Adjust the delay between iterations
}
----------------------------------------------------------------------------------------------------------------------------------------------------------
//DISPLAY RCS IN THE LED MATRIX:
#include <LedControl.h>

// Define the number of MAX7219 devices (usually 1)
#define NUM_DEVICES 1

// Define the pins for Data, Clock, and Load (CS) on the MAX7219
#define DATA_PIN 11
#define CLOCK_PIN 12
#define LOAD_PIN 10

LedControl lc = LedControl(DATA_PIN, CLOCK_PIN, LOAD_PIN, NUM_DEVICES);

// Define patterns for R, C, and S
byte rPattern[] = {
  0b01111000,
  0b10000100,
  0b10000100,
  0b11111000,
  0b10010000,
  0b10001000,
  0b10000100,
  0b10000010
};

byte cPattern[] = {
  0b00111100,
  0b01100010,
  0b10000000,
  0b10000000,
  0b10000000,
  0b10000000,
  0b01100010,
  0b00111100
};

byte sPattern[] = {
  0b00111100,
  0b01100010,
  0b10000000,
  0b10000000,
  0b01111000,
  0b00000100,
  0b11000100,
  0b01111000
};

void setup() {
  lc.shutdown(0, false);  // Wake up the display
  lc.setIntensity(0, 8);  // Set the brightness (0-15)
  lc.clearDisplay(0);    // Clear the display
}

void loop() {
  displayPattern(rPattern, 2000);  // Display 'R' for 2 seconds
  displayPattern(cPattern, 2000);  // Display 'C' for 2 seconds
  displayPattern(sPattern, 2000);  // Display 'S' for 2 seconds
}

void displayPattern(byte pattern[], int duration) {
  for (int row = 0; row < 8; row++) {
    lc.setRow(0, row, pattern[row]);
  }

  delay(duration);
  lc.clearDisplay(0);
  delay(500);  // Pause for 0.5 seconds between letters
}

